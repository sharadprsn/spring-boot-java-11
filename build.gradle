allprojects {
    ext {
        springBoot = '2.1.5.RELEASE'
        lombok = '1.18.6'
        junitJupiter = '5.4.2'
        mockitoCore = '2.19.0'
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:1.1.2'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.5.RELEASE"
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'


    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenCentral()
    }

    afterEvaluate {

        compileJava {
            inputs.property('moduleName', moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property('moduleName', moduleName)
            inputs.property('testDependencies', testDependencies)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', testDependencies,
                        '--add-reads', "$moduleName=$testDependencies",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,

                ]
                classpath = files()
            }

        }

        test {
            inputs.property('moduleName', moduleName)
            inputs.property('testDependencies', testDependencies)
            useJUnitPlatform()

            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=$testDependencies",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }
    }
}

project(':util') {
}

project(':application') {
    dependencies {
        compile project(":util")
    }
}

